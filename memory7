import pandas as pd
import ansible_runner
import re

# Define inventory file path
INVENTORY_FILE = "inventory.ini"

# Define Ansible playbook for memory benchmark
playbook = {
    "name": "Run Sysbench Memory Benchmark",
    "hosts": "all",
    "gather_facts": "yes",
    "tasks": [
        {"name": "Collect hostname",
         "shell": "hostname",
         "register": "hostname"},
        {"name": "Collect total memory",
         "shell": "free -m | awk '/Mem:/ {print $2}'",
         "register": "memory_mb"},
        {"name": "Run sysbench Memory Read benchmark",
         "shell": "sysbench memory --memory-block-size=4K --memory-total-size=100G --memory-oper=read --time=1800 run",
         "register": "memory_read"},
        {"name": "Run sysbench Memory Write benchmark",
         "shell": "sysbench memory --memory-block-size=4K --memory-total-size=100G --memory-oper=write --time=1800 run",
         "register": "memory_write"},
        {"name": "Save output",
         "debug": {"msg": "{{ memory_read.stdout }} {{ memory_write.stdout }}"}}
    ]
}

# Run the playbook
runner = ansible_runner.run(private_data_dir='.', inventory=INVENTORY_FILE, playbook=playbook)

# Parse Ansible results
data = []
for event in runner.events:
    if 'event_data' in event and 'res' in event['event_data']:
        res = event['event_data']['res']
        hostname = res.get('hostname', 'Unknown')
        memory_mb = res.get('memory_mb', '0')
        memory_read_output = res.get('memory_read', '')
        memory_write_output = res.get('memory_write', '')

        # Extract read/write performance metrics
        read_events_per_sec = re.search(r'events per second:\s+([\d\.]+)', memory_read_output)
        write_events_per_sec = re.search(r'events per second:\s+([\d\.]+)', memory_write_output)
        read_total_events = re.search(r'total number of events:\s+([\d\.]+)', memory_read_output)
        write_total_events = re.search(r'total number of events:\s+([\d\.]+)', memory_write_output)

        data.append([
            hostname,
            int(memory_mb) if memory_mb.isdigit() else 0,
            float(read_total_events.group(1)) if read_total_events else 0.0,
            float(read_events_per_sec.group(1)) if read_events_per_sec else 0.0,
            float(write_total_events.group(1)) if write_total_events else 0.0,
            float(write_events_per_sec.group(1)) if write_events_per_sec else 0.0
        ])

# Create DataFrame
columns = ["Hostname", "Memory (MB)", "Read Total Events", "Read Events/sec", "Write Total Events", "Write Events/sec"]
df = pd.DataFrame(data, columns=columns)

# Sort by performance (Read Events/sec)
df.sort_values(by="Read Events/sec", ascending=False, inplace=True)

# Save to Excel
excel_filename = "memory_benchmark_results.xlsx"
df.to_excel(excel_filename, index=False)
print(f"âœ… Results saved to {excel_filename}")
