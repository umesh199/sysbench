import json
import pandas as pd
import subprocess
import os

# Define the Ansible Playbook as a string
ansible_playbook = """---
- name: Run Memory Benchmark on Multiple Servers
  hosts: all
  gather_facts: yes
  tasks:
    - name: Install sysbench (if not installed)
      package:
        name: sysbench
        state: present

    - name: Run Memory Benchmark
      shell: |
        sysbench memory --memory-block-size=4K \\
        --memory-total-size=$(free -g | awk '/Mem:/ {print $2*5"G"}') \\
        --time=1800 --threads={{ ansible_processor_vcpus }} run | tee /tmp/sysbench_memory.log
      register: sysbench_output

    - name: Extract Benchmark Results
      shell: |
        grep "total number of events" /tmp/sysbench_memory.log | awk '{print $5}'
      register: total_events

    - name: Extract Events per Second
      shell: |
        grep "events per second" /tmp/sysbench_memory.log | awk '{print $4}'
      register: events_per_second

    - name: Return Data to Controller
      debug:
        msg: "Hostname={{ inventory_hostname }} Cores={{ ansible_processor_vcpus }} Total Events={{ total_events.stdout }} Events/sec={{ events_per_second.stdout }}"
"""

# Save the playbook to a temporary file
playbook_file = "memory_benchmark.yml"
with open(playbook_file, "w") as file:
    file.write(ansible_playbook)

print("âœ… Ansible playbook written to memory_benchmark.yml")

# Run the Ansible Playbook with live output
print("ðŸš€ Running memory benchmark on all servers...")
process = subprocess.Popen(["ansible-playbook", "-i", "inventory", playbook_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

# Live output display
for line in iter(process.stdout.readline, ''):
    print(line, end='')  # Show Ansible output in real-time

process.stdout.close()
process.wait()

# Parse Ansible JSON Output
print("\nðŸ“Š Processing benchmark results...")
data = []
with open(playbook_file, "r") as f:
    for line in f:
        if "Hostname=" in line:
            parts = line.split()
            hostname = parts[0].split("=")[1]
            cores = int(parts[1].split("=")[1])
            total_events = int(parts[2].split("=")[1])
            events_per_sec = float(parts[3].split("=")[1])
            data.append({"Hostname": hostname, "CPU Cores": cores, "Total Events": total_events, "Events/sec": events_per_sec})

# Convert to DataFrame
df = pd.DataFrame(data)

# Sort by Best Performance (Events/sec)
df = df.sort_values(by="Events/sec", ascending=False)

# Save to Excel
excel_file = "memory_benchmark_results.xlsx"
df.to_excel(excel_file, index=False)

# Clean up temporary playbook file
os.remove(playbook_file)

# Print final summary
print("\nâœ… Benchmark completed. Results saved to", excel_file)
print(df.to_string(index=False))  # Show results in console
